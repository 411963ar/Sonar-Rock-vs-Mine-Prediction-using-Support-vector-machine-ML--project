# -*- coding: utf-8 -*-
"""Sonar Rock vs Mine Prediction using Support vector machine, ML- project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r3wwJMWvA6i4Oj4bHMgu3GPOn4jmxtP8

Importing libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Loading Sonar dataset"""

df=pd.read_csv("/content/sonar.csv",header=None)

df.head()

"""Spliting data and labels"""

x=df.drop(columns=60,axis=1) #dropping target output column=60 that contains labels

y=df[60] #storing labels into y variable

print(x.shape)
print(y.shape)

df[60].value_counts() #counting number of rocks and mines labels in target output

df.groupby(60).mean() #cheking mean trends

"""Spliting data using train test split"""

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

"""training model"""

model= svm.SVC(kernel='linear')

model.fit(x_train,y_train)

"""training data accuracy"""

x_train_prediction= model.predict(x_train)
training_data_accuracy= accuracy_score(x_train_prediction,y_train)
print(training_data_accuracy)

"""test data accuracy"""

x_test_prediction= model.predict(x_test)
test_data_accuracy= accuracy_score(x_test_prediction,y_test)
print(test_data_accuracy)

"""Building a predictive system"""

input_data=(0.0068,0.0232,0.0513,0.0444,0.0249,0.0637,0.0422,0.1130,0.1911,0.2475,0.1606,0.0922,0.2398,0.3220,0.4295,0.2652,0.0666,0.1442,0.2373,0.2595,0.2493,0.3903,0.6384,0.8037,0.7026,0.6874,0.6997,0.8558,1.0000,0.9621,0.8996,0.7575,0.6902,0.5686,0.4396,0.4546,0.2959,0.1587,0.1681,0.0842,0.1173,0.1754,0.2728,0.1705,0.0194,0.0213,0.0354,0.0420,0.0093,0.0204,0.0199,0.0173,0.0163,0.0055,0.0045,0.0068,0.0041,0.0052,0.0194,0.0105)
#converting data into numpy
input_data_as_numpy= np.asarray(input_data)
# reshaping numpy for particular one instance
data_reshaped= input_data_as_numpy.reshape(1,-1)
prediction= model.predict(data_reshaped)
print(prediction)
if (prediction[0]=='M'):
  print(" The object is Mine")
else:
  print("The object is Rock")

